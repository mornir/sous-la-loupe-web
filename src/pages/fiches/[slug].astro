---
import { Icon } from 'astro-icon/components'
import Layout from '../../layouts/Layout.astro'
import fiches from '../../data/fiches.json'
import AlpineSearchBox from '@components/AlpineSearchBox.astro'

export function getStaticPaths() {
  return fiches.map((fiche) => {
    return { params: { slug: fiche.slug }, props: { fiche } }
  })
}

const { fiche } = Astro.props

const { traductions, exemples, liens, notes, definitions } = fiche

const groups = Object.entries(
  Object.groupBy(traductions, ({ groupe, sens }) => `${groupe}_${sens}`)
)

const hideFieldsColumn = traductions.every(({ sens }) => sens === '')

const shareData = {
  title: 'sous la loupe',
  text: `Comment traduire "${fiche.vedette}" ?`,
  url: Astro.url.pathname,
}

const description = `Comment traduire "${fiche.vedette}" ? ➡ ${traductions
  .map((t) => t.terme)
  .slice(0, 7)
  .join(', ')}...`
---

<Layout title={fiche.vedette + ' | sous la loupe'} desc={description}>
  <div
    class="mt-8 sm:mt-16 flex flex-col sm:flex-row items-center justify-center gap-6 print:hidden"
  >
    <a href="/">
      <Icon name="logo" class="text-6xl sm:text-5xl" />
    </a>
    <AlpineSearchBox />
  </div>

  <article
    class="mb-24 mt-12 lg:mt-20 border-primary border-4 p-5 sm:p-8 md:p-12 xl:p-20 rounded-lg max-w-screen-xl mx-auto"
  >
    <header class="flex justify-between">
      <h1 lang="de" class="lg:text-3xl text-2xl font-bold">
        {fiche.vedette}
        <span class="text-lg font-light">{fiche.genre}</span>
      </h1>
      <div class="print:hidden">
        <button class="mr-3" id="share">
          <span class="sr-only">Partager la fiche</span>
          <Icon
            name="mdi:share-variant"
            class="text-3xl lg:text-4xl text-accent"
          /></button
        >
        <button x-data @click="window.print()">
          <span class="sr-only">Imprimer la fiche</span>
          <Icon
            name="mdi:printer"
            class="text-3xl lg:text-4xl text-accent"
          /></button
        >
      </div>
    </header>

    {
      notes && (
        <p class="text-sm max-w-4xl">
          <span class="font-bold">Remarque :</span>
          <span set:html={notes} class="whitespace-pre-line" />
        </p>
      )
    }

    {
      definitions.length > 0 && (
        <details class="mt-4 max-w-4xl group print:hidden">
          <summary class="cursor-pointer text-accent hover:underline group-open:underline w-fit">
            Définition
          </summary>
          <ul class="text-sm space-y-4 mt-2">
            {definitions.map((def) => (
              <li>
                <p>
                  <span class="font-bold">{def.source} :</span>
                  <span set:html={def.definition} class="whitespace-pre-line" />
                </p>
              </li>
            ))}
          </ul>
        </details>
      )
    }

    <!-- style="grid-template-rows: masonry" -->
    <div
      class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start print:block"
      x-data
      x-masonry
    >
      <section>
        <h2 class="mt-8 lg:text-2xl text-xl print:hidden">
          Traductions proposées
        </h2>

        <div
          class=`grid lg:items-baseline gap-y-4 lg:gap-y-8 gap-x-16 lg:mt-8 mt-4 bg-slate-50 py-2 px-4 rounded-md max-w-prose print:columns-3xs print:block print:bg-white print:max-w-none print:px-0 ${hideFieldsColumn ? 'lg:grid-cols-1' : 'lg:grid-cols-[auto_1fr]'}`
        >
          {
            groups.map(([group, translations]) => (
              <>
                {!hideFieldsColumn && (
                  <h3 class="lg:text-sm text-xs align-baseline print:break-after-avoid">
                    {group.split('_')[1]}
                  </h3>
                )}
                <ul>
                  {
                    // @ts-ignore
                    translations.map((t) => (
                      <li class="lg:text-xl text-lg mb-2 print:break-before-avoid print:break-inside-avoid-column">
                        {t.terme}
                      </li>
                    ))
                  }
                </ul>
              </>
            ))
          }
        </div>
      </section>

      {
        exemples.length > 0 && (
          <section class="print:hidden">
            <h2 class="mt-8 lg:text-2xl text-xl">Exemples</h2>
            <div class="mt-8 max-w-prose ">
              <ul>
                {exemples.map((ex) => (
                  <li class="lg:text-lg mb-4 odd:bg-slate-200 even:bg-slate-100 py-2 px-4 rounded-md">
                    <p
                      lang="de"
                      set:html={ex.de}
                      class="mb-4 whitespace-pre-line"
                    />
                    <p set:html={ex.fr} class="whitespace-pre-line" />
                  </li>
                ))}
              </ul>
            </div>
          </section>
        )
      }

      {
        liens.length > 0 && (
          <section class="print:hidden">
            <h2 class="mt-8 lg:text-2xl text-xl">Voir aussi</h2>

            <ul class="mt-6 flex flex-col gap-y-4">
              {liens.map((l) => (
                <li>
                  <a
                    href={'/fiches/' + l.slug}
                    class="text-accent text-lg hover:underline"
                  >
                    {l.vedette}
                  </a>
                </li>
              ))}
            </ul>
          </section>
        )
      }
    </div>
  </article>
</Layout>

<script is:inline define:vars={{ shareData }}>
  const shareButton = document.querySelector('#share')

  if (navigator.share) {
    shareButton.addEventListener('click', async () => {
      try {
        await navigator.share(shareData)
      } catch (err) {
        console.error(err)
      }
    })
  } else {
    shareButton.style.display = 'none'
  }
</script>

<style>
  summary::marker {
    color: #d38c56;
    font-size: 1.2em;
  }
</style>
